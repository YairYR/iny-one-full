// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id    Int          @id @default(autoincrement())
//   email String       @unique
//   name  String?
//   posts Post[]
//   urls  ShortenUrl[]
// }
//
// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
//
// model ShortenUrl {
//   id        Int       @id @default(autoincrement())
//   subdomain String?
//   domain    String
//   path      String?
//   hash      String?
//   short     String
//   protocol  String
//   active    Boolean
//   updatedAt DateTime?
//   createdAt DateTime  @default(now())
//   utms      UrlUtm[]
//   owner     User?     @relation(fields: [userId], references: [id])
//   userId    Int?
// }
//
// model UrlUtm {
//   id      Int        @id @default(autoincrement())
//   name    String
//   content String
//   url     ShortenUrl @relation(fields: [urlId], references: [id])
//   urlId   Int
// }


model User {
  id Int @id  @default(autoincrement())
  email String
  passwordHash String
  status Int
  plan Int
  teams UsersOnTeams[]

  @@map(name: "users")
}

model UsersOnTeams {
  userId Int
  teamId String
  role  String
  user  User  @relation(fields: [userId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
  createdAt DateTime  @default(now())

  @@id([userId, teamId])
  @@map("users_on_teams")
}

model Team {
  id  String @id @default(uuid())
  id_author Int
  users UsersOnTeams[]
  urls  Url[]

  @@map(name: "teams")
}

// enum Role {
//   ADMIN
//   USER
//
//   @@map("roles")
// }

model Url {
  id Int @id
  id_team String
  code String @unique
  domain String
  reference String
  status Boolean
  qrCodeUrl String?
  utm_source String?
  utm_medium String?
  utm_campain String?
  utm_term String?
  utm_content String?
  utm_id String?
  utm_product String?
  updatedAt DateTime?
  createdAt DateTime  @default(now())
  tags         UrlTags[]
  team  Team  @relation(fields: [id_team], references: [id])
  history History[]
  click_count Int @default(0)

  @@map(name: "urls")
}

model History {
  id  Int @id @default(autoincrement())
  id_url  Int
  ip  String?
  userAgent String?
  country   String?
  referrer  String?
  createdAt DateTime  @default(now())
  url Url @relation(fields: [id_url], references: [id])

  @@map("url_history")
}

model UrlTags {
  id_url  Int
  id_tag  String
  url Url @relation(fields: [id_url], references: [id])
  tag Tag @relation(fields: [id_tag], references: [id])

  @@id([id_url, id_tag])
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  urls   UrlTags[]
}
